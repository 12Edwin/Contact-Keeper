name: CI/CD Workflow

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
     
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
     
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Asegúrese de tener este archivo
     
      - name: Run tests
        run: python -m unittest discover tests

  sonarcloud:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
     
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: [test, sonarcloud]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
     
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
     
      - name: Install SAM CLI
        run: pip install aws-sam-cli
     
      - name: Build SAM application
        run: |
          cd contact-Keeper
          sam build --use-container
     
      - name: Deploy SAM application
        run: |
          cd contact-Keeper
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name utez --capabilities CAPABILITY_IAM

  update_jira:
  runs-on: ubuntu-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Jira Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
    - name: Extract Jira issue keys
      id: extract_jira_keys
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_COMMITS=$(git log --format=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          JIRA_KEYS=$(echo "$PR_COMMITS" | grep -oP 'SOPE-\d+' | sort -u | tr '\n' ',')
          JIRA_KEYS=$(echo "$JIRA_KEYS" | sed 's/,$//')
        else
          if [ "${{ github.event.head_commit.message }}" | grep -oP 'SOPE-\d+' ]; then
            JIRA_KEYS=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'SOPE-\d+')
          else
            JIRA_KEYS=""
          fi
        fi
        if [ -n "$JIRA_KEYS" ]; then
          echo "JIRA_KEYS<<EOF" >> $GITHUB_OUTPUT
          for key in "${JIRA_KEYS[@]}"; do
            echo "$key" >> $GITHUB_OUTPUT
          done
          echo "EOF" >> $GITHUB_OUTPUT
          echo "HAS_JIRA_KEYS=true" >> $GITHUB_OUTPUT
        else
          echo "No se encontraron claves SOPE válidas. No se actualizará Jira."
          echo "HAS_JIRA_KEYS=false" >> $GITHUB_OUTPUT
        fi
    - name: Debug information
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Commit message: ${{ github.event.head_commit.message }}"
        echo "Has Jira keys: ${{ steps.extract_jira_keys.outputs.HAS_JIRA_KEYS }}"
        if [ "${{ steps.extract_jira_keys.outputs.HAS_JIRA_KEYS }}" = "true" ]; then
          echo "Jira keys found: ${{ steps.extract_jira_keys.outputs.JIRA_KEYS }}"
        fi
    - name: Update Jira
      if: steps.extract_jira_keys.outputs.HAS_JIRA_KEYS == 'true'
      env:
        JIRA_KEYS: ${{ steps.extract_jira_keys.outputs.JIRA_KEYS }}
      run: |
        IFS=',' read -ra JIRA_KEYS_ARRAY <<< "$JIRA_KEYS"
        for key in "${JIRA_KEYS_ARRAY[@]}"; do
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.JIRA_API_TOKEN }}" -d '{"transition":{"id":"${{ github.event_name == 'pull_request' && '2' || '3' }}"}}'  "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$key/transitions"
        done
    - name: Handle Jira update error
      if: failure()
      run: |
        echo "Error actualizando Jira. Continuando sin error..."
    - name: Add Jira comment
      if: steps.extract_jira_keys.outputs.HAS_JIRA_KEYS == 'true'
      env:
        JIRA_KEYS: ${{ steps.extract_jira_keys.outputs.JIRA_KEYS }}
      run: |
        IFS=',' read -ra JIRA_KEYS_ARRAY <<< "$JIRA_KEYS"
        for key in "${JIRA_KEYS_ARRAY[@]}"; do
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.JIRA_API_TOKEN }}" -d '{"body":"Actualización de GitHub:\n{panel}\nRepositorio: ${{ github.repository }}\nBranch: ${{ github.head_ref || github.ref }}\n${{ github.event_name == 'pull_request' && format('Pull Request: {0}', github.event.pull_request.html_url) || format('Commit: {0}', github.sha) }}\nAutor: ${{ github.actor }}\nEvento: ${{ github.event_name }}\n{panel}"}' "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$key/comment"
        done