AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Contact-Keeper

  Application to save and manage events

Globals:
  Function:
    Timeout: 10
    MemorySize: 256

Resources:
  MyDatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: MyDatabaseSecret
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  MyDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: '8.0.35'
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref MyDatabaseSecret, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref MyDatabaseSecret, ':SecretString:password}}' ] ]
      DBName: contact_keeper

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: SecretsManagerReadWrite
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
        - PolicyName: CognitoAdminCreateUser
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                Resource: '*'
        - PolicyName: CognitoAdminAddUserToGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                Resource: '*'
        - PolicyName: CognitoAdminInitiateAuth
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                Resource: '*'
        - PolicyName: CognitoAdminListGroupsForUser
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminListGroupsForUser
                Resource: '*'
        - PolicyName: CognitoUserListUsers
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                  - cognito-idp:AdminListGroupsForUser
                Resource: "*"

  CommonsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: commons
      Description: Common code and libraries
      ContentUri: ./commons/
      CompatibleRuntimes:
        - python3.12

  UsersApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: UserApi
      StageName: Prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      DisableExecuteApiEndpoint: false
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  EventsApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: EventApi
      StageName: Prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      DisableExecuteApiEndpoint: false
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  GroupsApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: GroupApi
      StageName: Prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      DisableExecuteApiEndpoint: false
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: auth_management/create_user
      Handler: create_user.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApiGateway
            Path: /users
            Method: POST


  ConfirmUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: auth_management/confirm_password
      Handler: confirm_password.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApiGateway
            Path: /confirm
            Method: POST
            

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: auth_management/login
      Handler: login.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApiGateway
            Path: /login
            Method: POST

  ReadUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_management/read_users
      Handler: read_users.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      Architectures:
        - x86_64
      Events:
        ReadUser:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApiGateway
            Path: /users
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_management/update_user
      Handler: update_user.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      Architectures:
        - x86_64
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApiGateway
            Path: /users/{id}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer

#  DeleteUserFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: user_management/
#      Handler: app.delete_user
#      Runtime: python3.12
#      Role: !GetAtt LambdaExecutionRole.Arn
#      Layers:
#        - !Ref CommonsLayer
#      Environment:
#        Variables:
#          AWS_STACK_NAME: !Ref AWS::StackName
#      Architectures:
#        - x86_64
#      Events:
#        DeleteUser:
#          Type: Api
#          Properties:
#            RestApiId: !Ref UsersApiGateway
#            Path: /users/{id}
#            Method: DELETE
#            Auth:
#              Authorizer: CognitoAuthorizer

  CreateEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: events_management/create_event_for_group
      Handler: create_event_for_group.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  CreateEventMeetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: events_management/create_event_for_meet
      Handler: create_event_for_meet.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events_meet
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  AssignPeopleEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: events_management/assign_people_event
      Handler: assign_people_event.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events_assign
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  UnAssignPeopleEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: events_management/unassign_people_event
      Handler: unassign_people_event.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events_unassign/{id_person}/{id_event}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer

  ReadEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: events_management/read_event
      Handler: read_event.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        ReadEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events/{id}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  ReadEventsGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: events_management/read_events_group
      Handler: read_events_group.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        ReadEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events/group/{id}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  ReadEventsPersonFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: events_management/read_events_person
      Handler: read_events_person.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        ReadEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events/person/{id}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: events_management/update_event
      Handler: update_event.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        UpdateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events/{id}
            Method: PUT

  DeleteEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: events_management/delete_event
      Handler: delete_event.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        DeleteEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EventsApiGateway
            Path: /events/{id}
            Method: DELETE

  CreateGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: group_management/create_group
      Handler: create_group.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateGroup:
          Type: Api
          Properties:
            RestApiId: !Ref GroupsApiGateway
            Path: /groups
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  ReadGroupsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: group_management/read_groups
      Handler: read_groups.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateGroup:
          Type: Api
          Properties:
            RestApiId: !Ref GroupsApiGateway
            Path: /groups/moderator/{moderator}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  ReadAllGroupsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: group_management/read_all_groups
      Handler: read_all_groups.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateGroup:
          Type: Api
          Properties:
            RestApiId: !Ref GroupsApiGateway
            Path: /groups
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  ReadGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: group_management/read_group
      Handler: read_group.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateGroup:
          Type: Api
          Properties:
            RestApiId: !Ref GroupsApiGateway
            Path: /groups/{id}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: group_management/update_group
      Handler: update_group.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateGroup:
          Type: Api
          Properties:
            RestApiId: !Ref GroupsApiGateway
            Path: /groups/{id}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: group_management/delete_group
      Handler: delete_group.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateGroup:
          Type: Api
          Properties:
            RestApiId: !Ref GroupsApiGateway
            Path: /groups/{id}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer

  AssignMemberFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: group_management/assign_member
      Handler: assign_member.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateGroup:
          Type: Api
          Properties:
            RestApiId: !Ref GroupsApiGateway
            Path: /assign_member_group
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  UnassignMemberFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: group_management/unassign_member
      Handler: unassign_member.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateGroup:
          Type: Api
          Properties:
            RestApiId: !Ref GroupsApiGateway
            Path: /unassign_member_group/{id_person}/{id_group}
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  CreateMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref AWS::StackName
      CodeUri: group_management/create_message
      Handler: create_message.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref CommonsLayer
      Architectures:
        - x86_64
      Events:
        CreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref GroupsApiGateway
            Path: /message
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  UsersRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ContactKeeperUserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Tu nombre de usuario es {username} y tu contraseña temporal es {####}. Por favor, cambia tu contraseña en el primer inicio de sesión.'
          EmailSubject: 'Tu cuenta temporal para Contact-Keeper'
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
      MfaConfiguration: 'OFF'
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ContactKeeperClient
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Administrators
      UserPoolId: !Ref CognitoUserPool
      Description: Group for administrators
      Precedence: 0
      RoleArn: !GetAtt UsersRole.Arn

  NormalUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: NormalUsers
      UserPoolId: !Ref CognitoUserPool
      Description: Group for normal users
      Precedence: 1
      RoleArn: !GetAtt UsersRole.Arn

Outputs:
  EventKeeperApi:
    Description: "API Gateway endpoint URL for Prod stage for Event Keeper functions"
    Value: !Sub "https://${EventsApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/events/"
  UserManagementApi:
    Description: "API Gateway endpoint URL for Prod stage for User Management functions"
    Value: !Sub "https://${UsersApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/"
  CreateUserFunction:
    Description: "Create User Lambda Function ARN"
    Value: !GetAtt CreateUserFunction.Arn
  ConfirmUserFunction:
    Description: "Confirm User Lambda Function ARN"
    Value: !GetAtt ConfirmUserFunction.Arn
  LoginFunction:
    Description: "Login Lambda Function ARN"
    Value: !GetAtt LoginFunction.Arn
  ReadUsersFunction:
    Description: "Read User Lambda Function ARN"
    Value: !GetAtt ReadUsersFunction.Arn
  UpdateUserFunction:
    Description: "Update User Lambda Function ARN"
    Value: !GetAtt UpdateUserFunction.Arn
#  DeleteUserFunction:
#    Description: "Delete User Lambda Function ARN"
#    Value: !GetAtt DeleteUserFunction.Arn
  CreateEventFunction:
    Description: "Create Event Lambda Function ARN"
    Value: !GetAtt CreateEventFunction.Arn
  ReadEventFunction:
    Description: "Read Event Lambda Function ARN"
    Value: !GetAtt ReadEventFunction.Arn
  UpdateEventFunction:
    Description: "Update Event Lambda Function ARN"
    Value: !GetAtt UpdateEventFunction.Arn
  DeleteEventFunction:
    Description: "Delete Event Lambda Function ARN"
    Value: !GetAtt DeleteEventFunction.Arn
  UserPoolId:
    Description: "ID of the Cognito User Pool"
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"
  UserPoolClientId:
    Description: "ID of the Cognito User Pool Client"
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"
  UserPoolArn:
    Description: "ARN of the Cognito User Pool"
    Value: !GetAtt CognitoUserPool.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolArn"
